What is the difference between an abstract class and an interface?

  - The most obvious difference between the two mechanisms is that abstract classes are permitted to contain implementations for some methods while interfaces are not.

  - A more important difference is that to implement the type defined by an abstract class, a class must be a subclass of the abstract class. 

    Any class that defines all of the required methods and obeys the general contract is permitted to implement an interface, regardless of where the class resides in the class hierarchy. 

    Because Java permits only single inheritance, this restriction on abstract classes severely con- strains their use as type definitions.

  - Existing classes can be easily retrofitted to implement a new interface. All you have to do is add the required methods if they don’t yet exist and add an implements clause to the class declaration. 

    For example, many existing classes were retrofitted to implement the Comparable interface when it was introduced into the platform. 

    Existing classes cannot, in general, be retrofitted to extend a new abstract class.

How would you determine whether to use an abstract class or an interface?

  - Interfaces are ideal for defining mixins. 

    Loosely speaking, a mixin is a type that a class can implement in addition to its “primary type” to declare that it pro- vides some optional behavior. 

    For example, Comparable is a mixin interface that allows a class to declare that its instances are ordered with respect to other mutu- ally comparable objects. Such an interface is called a mixin because it allows the optional functionality to be “mixed in” to the type’s primary functionality.

  - Interfaces allow the construction of nonhierarchical type frameworks.

    Type hierarchies are great for organizing some things, but other things don’t fall neatly into a rigid hierarchy.

    Example. In real life, some singers are also songwriters. Because we used interfaces rather than abstract classes to define these types, it is perfectly permissible for a single class to implement both Singer and Songwriter.

  - Using abstract classes to define types that permit multiple implementations has one great advantage over using interfaces: It is far easier to evolve an abstract class than an interface. 

    Public interfaces, therefore, must be designed carefully. Once an interface is released and widely implemented, it is almost impossible to change. You really must get it right the first time.

Why can’t a class be declared both final and abstract?

  - As you might expect, it is illegal to declare a class as both abstract and final since an abstract class is incomplete by itself and relies upon its subclasses to provide complete implementations.

What is the value of designing a codebase around the use of interfaces?

  - 

----------------------------------

What is the difference between an abstract class and an interface?

  - All methods in an interface are implicitly abstract. On the other hand, an abstract class may contain both abstract and non-abstract methods.

  - A class may implement a number of Interfaces, but can extend only one abstract class.

  - In order for a class to implement an interface, it must implement all its declared methods. However, a class may not implement all declared methods of an abstract class. Though, in this case, the sub-class must also be declared as abstract.

  - Abstract classes can implement interfaces without even providing the implementation of interface methods.

  - Variables declared in a Java interface is by default final. An abstract class may contain non-final variables.

  - Members of a Java interface are public by default. A member of an abstract class can either be private, protected or public.

  - An interface is absolutely abstract and cannot be instantiated. An abstract class also cannot be instantiated, but can be invoked if it contains a main method.





















