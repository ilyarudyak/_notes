simple
--------

(1) What is the difference between a shallow copy and a deep copy?

  - New object B is created, and the *fields* values of A are copied over to B. This is also known as a field-by-field copy. 

  - If the field value is a reference to an object it copies the reference, hence referring to the *same* object as A does, and if the field value is a primitive type it copies the value of the primitive type. 

  - The referenced objects are thus *shared*, so if one of these objects is modified (from A or B), the change is visible in the other.


(2) What is the difference between the identity operator and the equals() method?

  - The equals method, as implemented in the Object class, determines whether two object references are identical.

  - Override the equals method only for state-based equality testing, in which two objects are considered equal when they have the same contents. For example, the String class overrides equals to check whether two strings consist of the same characters. 

intermediate
--------------

(3) What is the relationship between the hashCode() method and the equals() method?

  - A common source of bugs is the failure to override the hashCode method. You must override hashCode in every class that overrides equals. 

  - Failure to do so will result in a violation of the general contract for Object.hashCode, which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.

  see example in Bloch, item 9.

(4) What is the default implementation of the toString() method?

  - The Object class defines the toString method to print the class name and the hash code:

    // prints java.io.PrintStream@2f6684
    System.out.println(System.out);


advanced
----------

(5) Why is a copy constructor preferable to the clone method?

(6) Why is the finalize() method unreliable for cleanup operations?


























